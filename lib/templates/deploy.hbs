#! /bin/bash

check_upstart_service(){
  pgrep "$1" > /dev/null 2>&1
}

echo 'Installing server dependencies..';
for dependency in nginx git node npm; do
if ! command -v $dependency 2> /dev/null; then
  echo error: server missing one of the following dependencies: nginx, git, node or npm;
  exit 1;
fi;
done;

# check the supplied sites-enabled path is valid
if [ ! -d "{{sitesEnabledPath}}" ]; then 
  echo error: nginx sites-enabled path {{sitesEnabledPath}} does not exist;
  exit 1;
fi;

# create the 'app path on server' directory if it doesn't exist
echo 'Preparing application project..';
if [ ! -d "{{serverAppPath}}" ]; then
  mkdir -p "{{serverAppPath}}";
fi;

# SSH forward for bitbucket.org and github.com
if [ -f ~/.ssh/config ]; then
  echo 'Backing up ~/.ssh/config to ~/.ssh/config.bak';
  cp -f ~/.ssh/config ~/.ssh/config.bak;
  rm ~/.ssh/config
fi;

# Create ~/.ssh/config for github and bitbucket
echo 'Writing new ~/.ssh/config';
echo -e 'Host github.com\n\tStrictHostKeyChecking no\n\tForwardAgent yes\nHost bitbucket.org\n\tStrictHostKeyChecking no\n\tForwardAgent yes' > ~/.ssh/config;

# stop any existing app instance
if check_upstart_service {{appName}}; then
  echo 'Stopping previously running application instances..';
  sudo stop {{appName}} > /dev/null;
fi;

# if there's no repo, clone it for the first time
if [ ! -d "{{repoPath}}" ]; then
  echo 'Cloning project for the first time..';
  git clone {{cloneUrl}} "{{repoPath}}" > /dev/null;
  {{errorCheck errors.cloning}}
fi;

# move into application directory
cd "{{appPath}}";

# fetch upstream changes on all branches
echo 'Updating project with latest changes..';
git fetch > /dev/null;
{{errorCheck 'failed to fetch upstream changes'}}

# create tracking branch â€“ may fail if there's already one, but that's ok
git branch {{branch}} origin/{{branch}} > /dev/null;

# checkout new/existing tracking branch
git checkout {{branch}} > /dev/null;
{{errorCheck errors.branchCheckout}}

# clean project directory
git clean -xdf

# pull latest changes from branch
git pull origin {{branch}} > /dev/null;
{{errorCheck errors.branchPull}}

# copy app config script if exists
if [ -f {{appConfig}} ]; then
  echo 'Copying application configuration..';
  if [ -d {{appPath}}/server/ ]; then
    cp -f "{{appConfig}}" "{{appPath}}/server/{{appConfigName}}";
    echo 'Copied configuration to `{{appPath}}/server/{{appConfigName}}`.';
  else
    cp -f "{{appConfig}}" "{{appPath}}/{{appConfigName}}";
    echo 'Copied configuration to `{{appPath}}/{{appConfigName}}`.';
  fi;
fi;

# install missing npm dependencies
echo 'Installing application dependencies..';
npm install > /dev/null;
{{errorCheck 'failed to install npm dependencies'}}

# copy the nginx and upstart config files to correct locations
echo 'Preparing NGINX to start application..';
sudo cp -f "{{nginxFrom}}" {{nginxTo}};
sudo cp -f "{{upstartFrom}}" {{upstartTo}};

# reload nginx config
sudo nginx -s reload > /dev/null;
{{errorCheck 'failed to reload nginx configuration'}}

# start a new app instance
if check_upstart_service {{appName}}; then
  echo 'Starting application..';
  sudo start {{appName}} > /dev/null;
  {{errorCheck 'application failed to start'}}
fi;
exit;
