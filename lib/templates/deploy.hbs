#! /bin/bash

check_upstart_service(){
  pgrep "$1" > /dev/null 2>&1
}

echo 'Checking server dependencies..';
for dependency in nginx git node npm; do
  if ! command -v $dependency >/dev/null; then
    echo error: server missing one of the following dependencies: nginx, git, node or npm;
    exit 1;
  fi;
done;

# Install nave if not found
if ! command -v nave > /dev/null; then
  echo 'Did not find nave. Installing nave..';
  sudo npm install nave -g;
  {{errorCheck 'Failed to install nave'}}
fi

# If nodeVersion is installed, use that, otherwise install it
node --version | grep {{nodeVersion}};

# Install node version if not already present
if [[ $? != 0 ]]; then
  echo 'Installing Node version `{{nodeVersion}}`...';
  nave install {{nodeVersion}}{{verbose debug}};
  {{errorCheck 'Failed to install specified Node version'}}
fi

# check the supplied sites-enabled path is valid
if [ ! -d "{{sitesEnabledPath}}" ]; then
  echo error: nginx sites-enabled path {{sitesEnabledPath}} does not exist;
  exit 1;
fi;

# create the 'app path on server' directory if it doesn't exist
echo 'Preparing application project..';
if [ ! -d "{{serverAppPath}}" ]; then
  mkdir -p "{{serverAppPath}}";
fi;

# SSH forward for bitbucket.org and github.com
if [ -f ~/.ssh/config ]; then
  echo 'Backing up ~/.ssh/config to ~/.ssh/config.bak';
  cp -f ~/.ssh/config ~/.ssh/config.bak;
  rm ~/.ssh/config
fi;

# Create ~/.ssh/config for github and bitbucket
echo 'Writing new ~/.ssh/config';
echo -e 'Host github.com\n\tStrictHostKeyChecking no\n\tForwardAgent yes\nHost bitbucket.org\n\tStrictHostKeyChecking no\n\tForwardAgent yes' > ~/.ssh/config;

# stop any existing app instance
if check_upstart_service {{appName}}; then
  echo 'Stopping previously running application instances..';
  sudo stop {{appName}}{{verbose debug}};
fi;

# if there's no repo, clone it for the first time
if [ ! -d "{{repoPath}}" ]; then
  echo 'Cloning project for the first time..';
  git clone {{cloneUrl}} "{{repoPath}}"{{verbose debug}};
  {{errorCheck errors.cloning}}
fi;

# move into application directory
cd "{{appPath}}";

# fetch upstream changes on all branches
echo 'Updating project with latest changes..';
git fetch --all{{verbose debug}};
{{errorCheck 'failed to fetch upstream changes'}}

# create tracking branch â€“ may fail if there's already one, but that's ok
git branch {{branch}} origin/{{branch}}{{verbose debug}};

# checkout new/existing tracking branch
git reset --hard origin/{{branch}}{{verbose debug}};
git checkout {{branch}}{{verbose debug}};
{{errorCheck errors.branchCheckout}}

# clean project directory
git clean -xdf;

# pull latest changes from branch
git pull origin {{branch}}{{verbose debug}};
{{errorCheck errors.branchPull}}

# copy app config script if exists
if [ -f {{appConfig}} ]; then
  echo 'Copying application configuration..';
  if [ -d {{appPath}}/server/ ]; then
    cp -f "{{appConfig}}" "{{repoPath}}/server/{{appConfigName}}";
    echo 'Copied configuration to `{{appPath}}/server/{{appConfigName}}`.';
  else
    cp -f "{{appConfig}}" "{{repoPath}}/{{appConfigName}}";
    echo 'Copied configuration to `{{appPath}}/{{appConfigName}}`.';
  fi;
fi;

# install missing npm dependencies
echo 'Installing application dependencies..';
nave use {{nodeVersion}} npm install {{npmInstallArguments}}{{verbose debug}};
{{errorCheck 'failed to install npm dependencies'}}

if [ -n "{{npmScript}}" ]; then
  sudo nave use {{nodeVersion}} npm run {{npmScript}};
  {{errorCheck 'failed when running custom npm script'}}
fi;

# copy the nginx and upstart config files to correct locations, if missing
if [ ! -f {{upstartTo}} ]; then
  echo 'Setting up Upstart config..';
  sudo cp -f "{{upstartFrom}}" {{upstartTo}};
fi
if [ ! -f {{nginxTo}} ]; then
  echo 'Preparing NGINX to start application..';
  sudo cp -f "{{nginxFrom}}" {{nginxTo}};
  # reload nginx config
  sudo nginx -s reload{{verbose debug}};
  {{errorCheck 'failed to reload nginx configuration'}}
fi

# start a new app instance
if check_upstart_service {{appName}}; then
  echo 'Starting application..';
  sudo start {{appName}}{{verbose debug}};
  {{errorCheck 'application failed to start'}}
fi;
exit;
